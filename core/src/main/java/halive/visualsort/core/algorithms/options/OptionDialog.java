/*
 * Copyright (c) HALive 2015
 * See LICENCE For Licence information.
 */

package halive.visualsort.core.algorithms.options;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import java.awt.Frame;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class OptionDialog extends JDialog {

    //UI Components added By the Designer
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel buttonPanel;
    private JPanel mainPane;

    private List<ComponentPair> pairs;
    private boolean initialized = false;

    private OptionDialogResult result = null;

    public OptionDialog(Frame parent, String title) {
        super(parent);
        initializeUI(title);
        pairs = new ArrayList<>();
    }

    public void initializeUI(String title) {
        this.setTitle(title);
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(e -> onOK());

        buttonCancel.addActionListener(e -> onCancel());

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        contentPane.registerKeyboardAction(e -> onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        setResizable(false);
    }

    public void initialize() {
        mainPane.setLayout(new GridLayoutManager(pairs.size(), 2, new Insets(5, 5, 5, 5), 10, 5));
        for (int i = 0; i < pairs.size(); i++) {
            ComponentPair pair = pairs.get(i);
            JComponent components[] = {new JLabel(pair.label), pair.component};
            for (int j = 0; j < components.length; j++) {
                GridConstraints constraint = new GridConstraints(i, j, 1, 1,
                        GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                        GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false);
                if (components[j] != null) {
                    mainPane.add(components[j], constraint);
                }
            }
        }
        initialized = true;
    }

    private List<String> validateResults() {
        List<String> invalidComponents = new ArrayList<>();
        pairs.stream()
                .filter(this::isComponent)
                .forEach(pair -> {
                    IOptionDialogComponent component = (IOptionDialogComponent) pair.component;
                    if (!component.isSelectionValid()) {
                        invalidComponents.add(pair.label.replace(":", ""));
                    }
                });
        return invalidComponents;
    }

    private boolean isComponent(ComponentPair p) {
        return (p != null && (p.component != null) && (p.component instanceof IOptionDialogComponent));
    }

    private void onOK() {
        List<String> invalidComponents = validateResults();
        if (invalidComponents.size() == 0) {
            OptionDialogResult result = new OptionDialogResult();
            Stream<ComponentPair> stream = pairs.stream();
            stream = stream.filter(this::isComponent);
            stream.forEach(p -> result.addToResults((IOptionDialogComponent) p.component));
            this.result = result;
            dispose();
        } else {
            StringBuilder out = new StringBuilder();
            out.append("The Following Components have a Invalid Selection:\n");
            invalidComponents.forEach(s -> {
                out.append("     - ").append(s).append("\n");
            });
            JOptionPane.showMessageDialog(this, out.toString(), "Warning!", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void onCancel() {

        dispose();
    }

    public void showDialog() {
        if (!initialized) {
            initialize();
        }
        this.pack();
        this.setVisible(true);
    }

    public OptionDialogResult getResult() {
        return result;
    }

    public void addComponentPair(String label, JComponent component) {
        pairs.add(new ComponentPair(component, label));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }
    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(buttonPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        buttonPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        buttonPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel1.add(buttonOK, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel1.add(buttonCancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainPane = new JPanel();
        mainPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(mainPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private static class ComponentPair {

        private String label;
        private JComponent component;

        public ComponentPair(JComponent component, String label) {
            this.component = component;
            this.label = label;
        }
    }
}
